package org.bosch.xc.civic.icc

<** @description: Test interface is used to test the correctness of the code generator
								  and give an example of how to use the generator.
									check Franca User Guide: https://drive.google.com/drive/folders/0B7JseVbR6jvhUnhLOUM5ZGxOOG8?resourcekey=0-U-X53hicOvlqAZCG86dCUQ
**>

typeCollection IccCommonTypes {
	version {
		major 1
		minor 0
	}

	<** @description: version: used for the register methods**>
	struct Version {
		<** @description: when the major changes, then backward compatibility with previous releases is not granted.**>
		VersionNumber versionMajor
	<** @description: when the minor changes, then backward compatibility with previous releases is granted, but something changed in the implementation of the API (e.g. new methods may have been added).**>
		VersionNumber versionMinor
		<** @description: when the micro changes, then backward compatibility with previous releases is granted (bug fixes or documentation modifications).**>
		VersionNumber versionMicro
	}

	<** @description: command response errors **>
	enumeration GenericCommandErrors {
		<** @description: No Error **>
		ERR_NO_ERROR
		<** @description: Server rejected the version of the client. **>
		ERR_VERSION_MISMATCH
		<** @description: FID is not known to the server. **>
		ERR_UNKNOWN_FID
		<** @description: A parameter value is not known. **>
		ERR_UNKNOWN_PARAMETER
		<** @description: Payload of FID does not match expectation. **>
		ERR_UNDEFINED_PAYLOAD
		<** @description: FID known but cannot be processed. Precondition not matching. **>
		ERR_SEQUENCE_ERROR
	}

    <** @description: base type of all parts of the Version **>
    typedef VersionNumber is UInt8

		<** @description: test a simple union **>
		union ExampleUnion {
			UInt32 element1
			Float element2
		}

		<** @description: test an extended union **>
		union ExampleExtendUnion extends ExampleUnion {
			UInt16 element3
		}

		<** @description: test a simple constant **>
		const String foo = "bar"
}

