package org.bosch.xc.civic.avb_c.test

import org.bosch.xc.civic.icc.IccCommonTypes.* from "IccCommonTypes.fidl"

<** @description: Test interface is used to test the correctness of the code generator
								  and give an example of how to use the generator.
									check Franca User Guide: https://drive.google.com/drive/folders/0B7JseVbR6jvhUnhLOUM5ZGxOOG8?resourcekey=0-U-X53hicOvlqAZCG86dCUQ
**>

interface avb_test {
	version { major 1 minor 2 }

	<** @description: register client and check version info. **>
	method register {
		in {
			<** @description: version of client interface implementation **>
			Version ClientVersion
		}
		out {
			<** @description: version of server interface implementation **>
			Version ServerVersion
		}
	}

	<** @description: deregister client **>
	method deregister {
	}

	<** @description: check if enums are working **>
	method setEnum {
		in {
			<** @description: check if enums are working **>
			TestEnum1 testEnum
		}
		out {
			<** @description: check if enums are working **>
			TestEnum2 testEnum
		}
	}

	<** @description: set standard integer types **>
	method setIntegerTypes {
		in {
			<** @description: test all integer types **>
			UInt8 uint8Var
			UInt16 uint16Var
			UInt32 uint32Var
			UInt64 uint64Var
		}
		out {
			UInt64 uint64Var
			UInt32 uint32Var
			UInt16 uint16Var
			UInt8 uint8Var
		}
	}

	<** @description: set struct types of fix types **>
	method setStruct {
		in {
			<** @description: test all integer types **>
			TestStruct testStruct
 		}
		out {
			TestStruct testStruct
		}
	}

	<** @description: set standard floating point types **>
	method setFloatingPointTypes {
		in {
			<** @description: test all floating point types **>
			Float floatVar
			Double doubleVar
		}
		out {
			Double doubleVar
			Float floatVar
		}
	}

	<** @description: set arrays of integer types **>
	method setIntegerArrayTypes {
		in {
			<** @description: test all arrays of integer types **>
			UInt8 uint8Data
			UInt8[] uint8Array
		}
		out {
			UInt8[] uint8Array
			UInt8 uint8Data
		}
	}

	<** @description: set dynamic types **>
	method setDynamicTypes {
		in {
			<** @description: test the boolean type **>
			String stringVar
			UInt64 int64Var
		}
		out {
			ByteBuffer byteBufferVar
			UInt32 int32Var
		}
	}

	<** @description: set boolean type **>
	method setBoolTypes {
		in {
			<** @description: test the boolean type **>
			Boolean boolVar
		}
		out {
			Boolean boolVar
		}
	}

	<** @description: test broadcasts **>
	broadcast broadcastTest {
		out {
			// error variable for testing broadcasts
			UInt32 errVar
		}
	}

	<** @description: enumeration to define the function ID's
										Naming: FID_<method/broadcast name> **>
	enumeration FID {
		<**	@description: FID for method register **>
			FID_REGISTER = 32
		<**	@description: FID for method deregister **>
			FID_DEREGISTER = 34
		<**	@description: FID for method setEnum **>
			FID_SETENUM = 48
		<**	@description: FID for method setIntegerTypes **>
			FID_SETINTEGERTYPES = 50
		<**	@description: FID for method setStruct **>
			FID_SETSTRUCT = 52
		<**	@description: FID for method setFloatingpointTypes **>
			FID_SETFLOATINGPOINTTYPES = 54
		<**	@description: FID for method setIntegerArrayTpes **>
			FID_SETINTEGERARRAYTYPES = 56
		<**	@description: FID for method setDynamicTypes **>
			FID_SETDYNAMICTYPES = 58
		<**	@description: FID for method setBoolTypes **>
			FID_SETBOOLTYPES = 58
		<**	@description: FID for broadcase test **>
			FID_BROADCASTTEST = 39
	}

	enumeration TestEnum1 {
		<**	@description: testing enumerations value default value = 0 **>
		TESTENUM1_0
		<**	@description:testing enumerations value consequitive value **>
		TESTENUM1_1
		<**	@description:testing enumerations value with set value = 10 **>
		TESTENUM1_10 = 10
		<**	@description:testing enumerations value with set value = 100 **>
		TESTENUM1_100 = 100
	}

	<** @description: test an extended enum **>
	enumeration TestEnum2 extends TestEnumBase {
		TESTENUM2_10
		TESTENUM2_11
		TESTENUM2_20 = 20
	}

	<** @description: test a BaseEnum **>
	enumeration TestEnumBase {
		BASEENUM_0
		BASEENUM_1
		BASEENUM_2
		BASEENUM_3
	}

	<** @description: test a struct of fix size **>
	struct TestStruct {
		UInt8 u8TestVar
		UInt16 u16TestVar
		Boolean bTestBool
		TestEnum1 testEnum
	}
}
